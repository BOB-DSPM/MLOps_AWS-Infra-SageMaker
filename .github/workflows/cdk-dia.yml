name: CDK Diagrams (cdk-dia)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# CDK 앱이 서브폴더에 있으면 여기만 변경 (예: infra)
env:
  INFRA_DIR: "."

permissions:
  contents: read

concurrency:
  group: cdk-dia-${{ github.ref }}
  cancel-in-progress: false

jobs:
  diagram:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.INFRA_DIR }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (no caching to avoid lockfile error)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Python (for Python-based CDK apps)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Detect project type
        id: detect
        run: |
          PM="none"
          if [ -f pnpm-lock.yaml ]; then PM="pnpm";
          elif [ -f yarn.lock ]; then PM="yarn";
          elif [ -f package.json ]; then PM="npm"; fi
          echo "pm=$PM" >> $GITHUB_OUTPUT
          if [ -f requirements.txt ]; then echo "pyreq=true" >> $GITHUB_OUTPUT; else echo "pyreq=false" >> $GITHUB_OUTPUT; fi

      - name: Enable pnpm (if needed)
        if: steps.detect.outputs.pm == 'pnpm'
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install Node deps (if Node CDK)
        if: steps.detect.outputs.pm != 'none'
        run: |
          if [ "${{ steps.detect.outputs.pm }}" = "pnpm" ]; then pnpm install --frozen-lockfile || pnpm install;
          elif [ "${{ steps.detect.outputs.pm }}" = "yarn" ]; then yarn install --frozen-lockfile || yarn install;
          elif [ "${{ steps.detect.outputs.pm }}" = "npm" ]; then \
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then npm ci; else npm install; fi; \
          fi

      - name: Install Python deps (if Python CDK)
        if: steps.detect.outputs.pyreq == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # CDK CLI를 로컬 devDep로 안 넣어도 npx로 사용 가능
      - name: CDK synth
        run: npx --yes aws-cdk@latest synth || true

      - name: Generate diagrams (PNG & HTML via npx)
        run: |
          mkdir -p diagrams
          npx --yes cdk-dia@latest -o diagrams/cdk-dia.png
          npx --yes cdk-dia@latest --rendering cytoscape-html -o diagrams/cdk-dia.html

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cdk-diagrams
          path: ${{ env.INFRA_DIR }}/diagrams
          retention-days: 14
