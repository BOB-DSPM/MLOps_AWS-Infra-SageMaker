version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: "ap-northeast-2"
    # VPC Endpoints configured for AWS services access
    DATA_BUCKET: "my-mlops-dev-dev-data"
    SM_EXEC_ROLE_ARN: "arn:aws:iam::651706765732:role/My-mlops-BaseStack-SmExecRole9469EF9D-xPtKqAhhoz4g"
    FEATURE_GROUP_NAME: "ad-click-feature-group-dev"
    USE_FEATURE_STORE: "true"
    EXTERNAL_CSV_URI: "s3://my-mlops-dev-dev-data/raw-data/ad_click_dataset.csv"
    MODEL_PACKAGE_GROUP_NAME: "my-mlops-dev-dev-pkg"
    USE_SM_PIPELINE: "true"

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - pip install --upgrade pip
      - pip install boto3 sagemaker==2.* pandas numpy
      
  build:
    commands:
      - echo "=== BUILD PHASE STARTED ==="
      - echo "Setting up correct environment variables..."
      - export DATA_BUCKET="my-mlops-dev-dev-data"
      - export EXTERNAL_CSV_URI="s3://my-mlops-dev-dev-data/raw-data/ad_click_dataset.csv"
      - export MODEL_PACKAGE_GROUP_NAME="my-mlops-dev-dev-pkg"
      - export USE_FEATURE_STORE="true"
      - echo "Environment variables configured:"
      - echo "  DATA_BUCKET=$DATA_BUCKET"
      - echo "  EXTERNAL_CSV_URI=$EXTERNAL_CSV_URI"
      - echo "  MODEL_PACKAGE_GROUP_NAME=$MODEL_PACKAGE_GROUP_NAME"
      - echo "  USE_FEATURE_STORE=$USE_FEATURE_STORE"
      - echo "Ensuring Model Package Group exists..."
      - |
        python3 << 'EOF'
        import os, sys, boto3
        from botocore.exceptions import ClientError
        sm = boto3.client('sagemaker')
        group = os.environ['MODEL_PACKAGE_GROUP_NAME']
        try:
            sm.describe_model_package_group(ModelPackageGroupName=group)
            print(f'[MPG] exists: {group}')
        except ClientError as e:
            if e.response['Error']['Code'] == 'ValidationException' and 'does not exist' in e.response['Error']['Message']:
                sm.create_model_package_group(ModelPackageGroupName=group, ModelPackageGroupDescription='Created by CodeBuild')
                print(f'[MPG] created: {group}')
            else:
                print(f'[ERROR] MPG check: {e}', file=sys.stderr)
                sys.exit(1)
        EOF
      - echo "USE_SM_PIPELINE=$USE_SM_PIPELINE"
      - echo "Starting SageMaker pipeline execution..."
      - |
        if [ "$USE_SM_PIPELINE" = "true" ]; then
          python3 pipelines/pipeline_def.py --run --wait
        else
          echo "SageMaker pipeline execution skipped"
        fi
      - echo "Uploading model package information..."
      - |
        python3 << 'EOF'
        import os, boto3, json
        try:
            sm = boto3.client('sagemaker')
            resp = sm.list_model_packages(ModelPackageGroupName=os.environ['MODEL_PACKAGE_GROUP_NAME'], SortOrder='Descending', MaxResults=1)
            if resp['ModelPackageSummaryList']:
                latest_arn = resp['ModelPackageSummaryList'][0]['ModelPackageArn']
                print(f'[LATEST MODEL] {latest_arn}')
                with open('/tmp/latest_model_arn.txt', 'w') as f:
                    f.write(latest_arn)
                s3 = boto3.client('s3')
                s3.upload_file('/tmp/latest_model_arn.txt', os.environ['DATA_BUCKET'], 'model-registry/latest_model_arn.txt')
                print('[UPLOADED] Model ARN to S3')
            else:
                print('[NO MODELS] in package group')
        except Exception as e:
            print(f'[ERROR] {e}', file=sys.stderr)
        EOF
      - echo "=== BUILD PHASE COMPLETED ==="
      
  post_build:
    commands:
      - echo "Post-build phase completed on `date`"
      - echo "Pipeline execution completed successfully"

artifacts:
  files:
    - '**/*'
